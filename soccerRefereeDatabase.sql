/*
	Personal Project:
    Referee Administration Database
    Michael Moffat
*/

-- Use my database
USE km_moffatm2;

/*************************
  Drop Tables 
**************************/
 DELIMITER $$
		-- Create/Replace a Proceudure called SP_DROP_TABLES 
	DROP PROCEDURE IF EXISTS SP_DROP_TABLES$$
	CREATE PROCEDURE SP_DROP_TABLES() 
	BEGIN
		DROP TABLE IF EXISTS RECORDING;
		DROP TABLE IF EXISTS OFFICIATION;
		DROP TABLE IF EXISTS RECORDING;
		DROP TABLE IF EXISTS PLAYER;
		DROP TABLE IF EXISTS GAME;
		DROP TABLE IF EXISTS LOCATION;
		DROP TABLE IF EXISTS TEAM;
		DROP TABLE IF EXISTS REFEREE;
		DROP TABLE IF EXISTS ENDORSEMENT;
		DROP TABLE IF EXISTS CERTIFICATION;
		DROP TABLE IF EXISTS TIER;
	END$$

	/**********************************************************
		Create Tables 
	***********************************************************/
	 -- Create/Replace a Proceudure called SP_CREATE_TABLES 
	DROP PROCEDURE IF EXISTS SP_CREATE_TABLES$$
	CREATE PROCEDURE SP_CREATE_TABLES() 
	BEGIN
		-- Create the Tier table 
		CREATE TABLE IF NOT EXISTS TIER (
		TIER_ID INT AUTO_INCREMENT PRIMARY KEY,
		TIER_NAME VARCHAR(50),
		TIER_ASSISTANTS_NEEDED BOOL NOT NULL,
		TIER_GAME_DURATION_MINUTES INT NOT NULL,
			CHECK (0 < TIER_GAME_DURATION_MINUTES < 90)
		);

		-- Create the Certification table
		CREATE TABLE IF NOT EXISTS CERTIFICATION (
		CERTIFICATION_ID INT AUTO_INCREMENT PRIMARY KEY,
		CERTIFICATION_NAME VARCHAR(50) NOT NULL
		);

		-- Create the Endorsement Table
		CREATE TABLE IF NOT EXISTS ENDORSEMENT(
		TIER_ID INT, 
		CERTIFICATION_ID INT, 
		FOREIGN KEY (TIER_ID) REFERENCES TIER(TIER_ID), 
		FOREIGN KEY (CERTIFICATION_ID) REFERENCES CERTIFICATION(CERTIFICATION_ID),
		PRIMARY KEY (TIER_ID, CERTIFICATION_ID)
		);

		-- Create the Referee Table 
		CREATE TABLE IF NOT EXISTS REFEREE(
		REFEREE_ID INT AUTO_INCREMENT PRIMARY KEY,
		CERTIFICATION_ID INT NOT NULL,
			CHECK(CERTIFICATION_ID > 0), 
		REFEREE_FIRST_NAME VARCHAR(15),
		REFEREE_LAST_NAME VARCHAR(15)
		);

		-- Create the Team Table 
		CREATE TABLE IF NOT EXISTS TEAM(
		TEAM_ID INT AUTO_INCREMENT PRIMARY KEY,
		TIER_ID INT,
		TEAM_NAME VARCHAR(50),
		FOREIGN KEY (TIER_ID) REFERENCES TIER(TIER_ID)
		);

		-- Create the Player Table
		CREATE TABLE IF NOT EXISTS PLAYER(
		PLAYER_ID INT AUTO_INCREMENT PRIMARY KEY,
		TEAM_ID INT ,
		PLAYER_FIRST_NAME VARCHAR(15),
		PLAYER_LAST_NAME VARCHAR(15),
		PLAYER_SUSPENDED BOOLEAN DEFAULT FALSE NOT NULL,
		FOREIGN KEY (TEAM_ID) REFERENCES TEAM(TEAM_ID)
		);

		-- Create the Location table 
		CREATE TABLE IF NOT EXISTS LOCATION(
		LOCATION_ID INT AUTO_INCREMENT PRIMARY KEY,
		LOCATION_TITLE VARCHAR(50) NOT NULL,
		LOCATION_ADDRESS VARCHAR(150), 
		LOCATION_FIELD_NUMBER INT,
			CHECK (LOCATION_FIELD_NUMBER < 20)
		);

		-- Create the Game Table 
		CREATE TABLE IF NOT EXISTS GAME( 
		GAME_ID INT AUTO_INCREMENT PRIMARY KEY,
		TIER_ID INT,
		GAME_TEAM_1 INT, 
		GAME_TEAM_2 INT,
		-- LOCATION_ID INT, 
        GAME_LOCATION INT NOT NULL,
		GAME_START_TIME DATETIME,
		GAME_END_TIME DATETIME,
		GAME_TEAM_1_SCORE INT,
			CHECK (GAME_TEAM_1_SCORE < 100),
		GAME_TEAM_2_SCORE INT,
			CHECK (GAME_TEAM_2_SCORE < 100),
		FOREIGN KEY (GAME_TEAM_1) REFERENCES TEAM(TEAM_ID),
		FOREIGN KEY (GAME_TEAM_2) REFERENCES TEAM(TEAM_ID),
		FOREIGN KEY (GAME_LOCATION) REFERENCES LOCATION(LOCATION_ID)
		);

		-- Create the Recording table 
		CREATE TABLE IF NOT EXISTS RECORDING(
		RECORDING_ID INT AUTO_INCREMENT,
		GAME_ID INT NOT NULL,
		PLAYER_ID INT NOT NULL, 
		RECORDING_TYPE VARCHAR(11) NOT NULL,   
			CHECK (RECORDING_TYPE = "Red Card" OR RECORDING_TYPE = "Yellow Card" OR RECORDING_TYPE = "Goal"),
		FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID),
		FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER(PLAYER_ID),
		PRIMARY KEY ( RECORDING_ID, GAME_ID, PLAYER_ID)
		);

		-- Create the Officiation table
		CREATE TABLE IF NOT EXISTS OFFICIATION(
		GAME_ID INT NOT NULL,
		REFEREE_ID INT NOT NULL,
		OFFICIATION_POSITION VARCHAR(15),
		FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID), 
		FOREIGN KEY (REFEREE_ID) REFERENCES REFEREE(REFEREE_ID),
		PRIMARY KEY (GAME_ID, REFEREE_ID)
		);
	END$$

	/********************************************
		Insert data into tables 
	********************************************/

	 -- Create/Replace a Proceudure called SP_POPULATE_DATA 
	DROP PROCEDURE IF EXISTS SP_POPULATE_DATA$$
	CREATE PROCEDURE SP_POPULATE_DATA() 
	BEGIN
		-- Insert into Tier table 
			CALL TIER_ADD ('Kindergarten', FALSE, 40);
			CALL TIER_ADD ('First Grade', FALSE, 40);
			CALL TIER_ADD ('Second Grade', FALSE, 40); 
			CALL TIER_ADD ('Third Grade', FALSE, 40);
			CALL TIER_ADD ('Fourth Grade', FALSE, 60); 
			CALL TIER_ADD ('Fifth Grade', FALSE, 60);
			CALL TIER_ADD ('Sixth Grade', TRUE, 60);
			CALL TIER_ADD ('Seventh Grade', TRUE, 60); 
			CALL TIER_ADD ('Eigth Grade', TRUE, 60);
			CALL TIER_ADD ('Nineth Grade', TRUE, 60); 
			CALL TIER_ADD ('Tenth Grade', TRUE, 90);
			CALL TIER_ADD ('Eleventh Grade', TRUE, 90);
			CALL TIER_ADD ('Twelth Grade', TRUE, 90);
			CALL TIER_ADD ('College', TRUE, 90);
			CALL TIER_ADD ('Adult', TRUE, 90);
		 
		 -- Insert into Certification table
			CALL CERTIFICATION_ADD('Level 1 Certification');
			CALL CERTIFICATION_ADD('Level 2 Certification');
			CALL CERTIFICATION_ADD('Level 3 Certification'); 

		-- Insert into Endorsement table
			CALL ENDORSEMENT_ADD('Level 1 Certification', 'Kindergarten');
			CALL ENDORSEMENT_ADD('Level 1 Certification', 'First Grade');
			CALL ENDORSEMENT_ADD('Level 1 Certification',  'Second Grade');
			CALL ENDORSEMENT_ADD('Level 1 Certification','Third Grade');
			CALL ENDORSEMENT_ADD('Level 1 Certification','Fourth Grade');
			CALL ENDORSEMENT_ADD('Level 1 Certification','Fifth Grade');
			
			CALL ENDORSEMENT_ADD('Level 2 Certification','Kindergarten');
			CALL ENDORSEMENT_ADD('Level 2 Certification','First Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Second Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Third Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Fourth Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Fifth Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Sixth Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Seventh Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Eigth Grade');
			CALL ENDORSEMENT_ADD('Level 2 Certification','Nineth Grade');
		   
			CALL ENDORSEMENT_ADD('Level 3 Certification','Kindergarten');
			CALL ENDORSEMENT_ADD('Level 3 Certification','First Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Second Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Third Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Fourth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Fifth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Sixth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Seventh Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Eigth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Nineth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Tenth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Eleventh Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Twelth Grade');
			CALL ENDORSEMENT_ADD('Level 3 Certification','College');
			CALL ENDORSEMENT_ADD('Level 3 Certification','Adult'); 
            
			-- Insert into Referee table 
			   CALL REFEREE_ADD('Nate', 'Lewis', 'Level 2 Certification');
			   CALL REFEREE_ADD('Claudia', 'Woodward', 'Level 2 Certification'); 
			   CALL REFEREE_ADD('Christopher', 'Lombardi', 'Level 3 Certification');
			  
			-- Insert into Team table  
				CALL TEAM_ADD('The Tigers', 'Fifth Grade');
				CALL TEAM_ADD('The Sharks', 'Fifth Grade');
				CALL TEAM_ADD('Quick Silver', 'Fifth Grade');
				CALL TEAM_ADD('Crossfire Luna', 'Nineth Grade');
				CALL TEAM_ADD('Crossfire Mele',  'Nineth Grade');
				CALL TEAM_ADD('Seattle United North Tusler', 'Nineth Grade');
		   
		   -- Insert into Player table 
				CALL PLAYER_ADD('Max', 'Luna', 'Crossfire Luna', TRUE);
				CALL PLAYER_ADD('Thomas', 'Macelfresh','Crossfire Luna', FALSE);
				CALL PLAYER_ADD('Caden', 'Pop','Crossfire Luna', FALSE);
				CALL PLAYER_ADD('Zach', 'Pruit', 'Crossfire Mele', FALSE);
				CALL PLAYER_ADD('Alex', 'Kim', 'Crossfire Mele', FALSE);
				CALL PLAYER_ADD('Paul', 'Perkins', 'Crossfire Mele', FALSE);
				CALL PLAYER_ADD('Sam', 'Margoon', 'The Tigers', FALSE);
				CALL PLAYER_ADD('Christopher', 'Ahern', 'The Tigers', FALSE);
				CALL PLAYER_ADD('Grayson', 'Thorne', 'The Tigers', FALSE);
				CALL PLAYER_ADD('Grahm', 'Shmidt',  'The Sharks', FALSE);
				CALL PLAYER_ADD('Jesse', 'Taylor',  'The Sharks', TRUE);
				CALL PLAYER_ADD('Da', 'Chang', 'The Sharks', FALSE);
				CALL PLAYER_ADD('Beto', 'Ramerez', 'Quick Siler', FALSE);
				CALL PLAYER_ADD('Elijah', 'Gillmer', 'Quick Silver', FALSE);
				CALL PLAYER_ADD('Tim', 'Sherlly', 'Quick Silver', TRUE);
				CALL PLAYER_ADD('James', 'Rowan', 'Seattle United North Tusler', FALSE);
				CALL PLAYER_ADD('Kei', 'Peterson','Seattle United North Tusler', FALSE);
				
			 -- Insert into Location table 
				CALL LOCATION_ADD('Marymoor Park', '6046 West Lake Sammamish Pkwy NE, Redmond, WA 98052', 1);
				CALL LOCATION_ADD('Marymoor Park', '6046 West Lake Sammamish Pkwy NE, Redmond, WA 98052', 2);
				CALL LOCATION_ADD('Marymoor Park', '6046 West Lake Sammamish Pkwy NE, Redmond, WA 98052', 3);
				CALL LOCATION_ADD('Perigo Park', '9011 196th Ave NE, Redmond, WA 98053', 1);
				CALL LOCATION_ADD('Perigo Park', '9011 196th Ave NE, Redmond, WA 98053', 2);
				CALL LOCATION_ADD('Perigo Park', '9011 196th Ave NE, Redmond, WA 98053', 3); 
			 
			 -- Insert into Game table 
				CALL GAME_ADD("Fifth Grade","The Tigers", "The Sharks",  'Marymoor Park', 1, '2020-03-15  12:00:00', '2020-03-15  12:40:00', 4, 1);
				CALL GAME_ADD("Fifth Grade", "The Tigers", "Quick Silver", 'Marymoor Park', 2, '2020-04-10  15:00:00', '2020-04-10  15:40:00', 2, 1);
				CALL GAME_ADD("Nineth Grade", "Crossfire Mele", "Seattle United North Tusler", 'Perigo Park', 3, '2020-04-15  9:00:00', '2020-03-15  10:00:00', 0, 2);
				CALL GAME_ADD("Nineth Grade", "Crossfire Luna", "Crossfire Mele", 'Marymoor Park', 1, '2020-06-20  18:00:00', '2020-06-20  19:00:0', NULL, NULL);
                CALL GAME_ADD("Nineth Grade", "Seattle United North Tusler", "Crossfire Mele", 'Perigo Park', 2, '2020-07-10  16:00:00', '2020-07-10  17:00:0', NULL, NULL);
				CALL GAME_ADD("Fifth Grade", "The Sharks", "Quick Silver", 'Marymoor Park', 3, '2020-07-18  15:00:00', '2020-07-18  15:40:00', NULL, NULL);
                
                
			-- Insert into Offication table 
				CALL OFFICIATION_ADD('The Tigers', 'The Sharks', 'Nate', 'Lewis', 'Center');
				CALL OFFICIATION_ADD('The Tigers', 'Quick Silver', 'Claudia', 'Woodward', 'Center');
				CALL OFFICIATION_ADD('Crossfire Mele', 'Seattle United North Tusler', 'Christopher', 'Lombardi', 'Center');
				CALL OFFICIATION_ADD('Crossfire Mele', 'Seattle United North Tusler', 'Claudia', 'Woodward', 'Assistant');
				CALL OFFICIATION_ADD('Crossfire Luna', 'Crossfire Mele', 'Claudia', 'Woodward', 'Center');
			
			-- Insert into Recording table 
				CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Sam', 'Margoon', 'Goal');  
                CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Sam', 'Margoon', 'Goal');  
                CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Sam', 'Margoon', 'Goal');
				CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Grayson', 'Thorne', 'Goal');
                CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Grayson', 'Thorne', 'Goal');
                CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Jesse', 'Taylor', 'Red Card'); 
				CALL RECORDING_ADD('The Tigers', 'The Sharks', 'Da', 'Chang', 'Goal');
				CALL RECORDING_ADD('The Tigers', 'Quick Silver', 'Christopher', 'Ahern', 'Goal');
				CALL RECORDING_ADD( 'Crossfire Mele', 'Seattle United North Tusler', 'James', 'Rowan', 'Goal');
                CALL RECORDING_ADD( 'Crossfire Mele', 'Seattle United North Tusler', 'Paul', 'Perkins', 'Yellow Card');
				CALL RECORDING_ADD('Crossfire Mele', 'Seattle United North Tusler', 'Kei' , 'Peterson', 'Goal');
		END$$

   
/********************************************************
	Create Views For SP_CREATE_VIEWS 
********************************************************/
 
-- Create/Replace a Proceudure called SP_CREATE_VIEWS 
DROP PROCEDURE IF EXISTS SP_CREATE_VIEWS$$
CREATE PROCEDURE SP_CREATE_VIEWS() 
BEGIN

    -- What is the maximum number of goals scored by a player on each team that has scored?
    CREATE OR REPLACE VIEW VIEW_MAX_GOALS AS 
    SELECT  TEAM.TEAM_NAME AS Team, MAX(GOALS) AS "Max Player Goals" 
		FROM (SELECT PLAYER.PLAYER_ID AS PLAYER_ID, COUNT(RECORDING_ID) AS GOALS, TEAM_ID AS TEAM
		FROM  PLAYER
			INNER JOIN RECORDING ON PLAYER.PLAYER_ID = RECORDING.PLAYER_ID
		WHERE RECORDING_TYPE = 'Goal'
		GROUP BY PLAYER.PLAYER_ID) PLAYER_GOALS
			INNER JOIN PLAYER ON PLAYER_GOALS.PLAYER_ID = PLAYER.PLAYER_ID
			INNER JOIN TEAM ON PLAYER.TEAM_ID = TEAM.TEAM_ID
		GROUP BY TEAM.TEAM_ID; 
	
    -- Which games need referees? i.e. what games have no referee, are in a tier that needs assistants and does not have at least 1 assistant, or has an assistant but no center? 
    CREATE OR REPLACE VIEW VIEW_UNASSIGNED_MATCHES AS 
		SELECT TIER_NAME AS "Tier", (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID = GAME_TEAM_1) AS "Team 1", (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID = GAME_TEAM_2) AS "Team 2", GAME_START_TIME AS "Start", GAME_END_TIME AS "End", LOCATION_TITLE AS "Location"
    FROM 
		GAME 
        INNER JOIN TIER ON GAME.TIER_ID = TIER.TIER_ID
        INNER JOIN LOCATION ON GAME.GAME_LOCATION = LOCATION.LOCATION_ID
		LEFT OUTER JOIN OFFICIATION ON GAME.GAME_ID = OFFICIATION.GAME_ID
	WHERE 
		REFEREE_ID IS NULL 
		OR (TIER.TIER_ASSISTANTS_NEEDED = TRUE AND (NOT EXISTS(SELECT REFEREE_ID FROM OFFICIATION WHERE OFFICIATION.GAME_ID = GAME.GAME_ID AND  OFFICIATION.OFFICIATION_POSITION = "Assistant")))
        OR (TIER.TIER_ASSISTANTS_NEEDED = TRUE AND (NOT EXISTS(SELECT REFEREE_ID FROM OFFICIATION WHERE OFFICIATION.GAME_ID = GAME.GAME_ID AND OFFICIATION.OFFICIATION_POSITION = "Center")))
    ;
    
    -- How many referees are certified for each tier?
	CREATE OR REPLACE VIEW VIEW_TIER_ASSIGNMENTS AS
		SELECT TIER_NAME as "Tier", COUNT(TIER.TIER_ID) AS "Certified Referees"  
    FROM  
		REFEREE 
        INNER JOIN ENDORSEMENT ON REFEREE.CERTIFICATION_ID = ENDORSEMENT.CERTIFICATION_ID
        INNER JOIN TIER ON ENDORSEMENT.TIER_ID = TIER.TIER_ID
	GROUP BY TIER.TIER_ID; 
    	
	-- What players have recieved a red card or are suspended? 
    CREATE OR REPLACE VIEW VIEW_RED_CARDS AS
    SELECT CONCAT( PLAYER_FIRST_NAME, " ", PLAYER_LAST_NAME) AS "Restrained Player", TEAM_NAME AS "Team"
    FROM PLAYER
		LEFT OUTER JOIN RECORDING ON RECORDING.PLAYER_ID = PLAYER.PLAYER_ID
        INNER JOIN TEAM ON PLAYER.TEAM_ID = TEAM.TEAM_ID
    WHERE 
		RECORDING.RECORDING_TYPE = "Red Card"
        OR PLAYER.PLAYER_SUSPENDED 
        ;    
     
     
	/* create views to output denormalized data  */
    
	CREATE OR REPLACE VIEW VIEW_ALL_TEAMS AS 
    SELECT  TIER_NAME AS "Tier", TEAM_NAME AS "Team", CONCAT(PLAYER_FIRST_NAME," ",PLAYER_LAST_NAME) AS "Player", (CASE WHEN PLAYER_SUSPENDED = TRUE THEN 'Yes' ELSE 'No' END) AS "Suspended"
    FROM TEAM
		INNER JOIN TIER ON TEAM.TIER_ID = TIER.TIER_ID
        INNER JOIN PLAYER ON TEAM.TEAM_ID = PLAYER.TEAM_ID;
	
	CREATE OR REPLACE VIEW VIEW_ALL_GAMES AS 
    SELECT (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID = GAME_TEAM_1) AS "Team 1", (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID = GAME_TEAM_2) AS "Team 2", TIER_NAME AS "Tier",
				LOCATION.LOCATION_TITLE AS "Location", LOCATION_FIELD_NUMBER AS "Field", GAME_START_TIME AS "Start", GAME_END_TIME AS "End", CONCAT(REFEREE_FIRST_NAME," ",REFEREE_LAST_NAME) AS "Referee", OFFICIATION_POSITION "Referee Position", CERTIFICATION_NAME AS "Referee's Certification", GAME_TEAM_1_SCORE AS "Team 1 Score", GAME_TEAM_2_SCORE AS "Team 2 Score"
	FROM GAME 
		INNER JOIN TEAM ON GAME.GAME_TEAM_1 = TEAM.TEAM_ID
        INNER JOIN LOCATION ON GAME.GAME_LOCATION = LOCATION.LOCATION_ID
        INNER JOIN TIER ON GAME.TIER_ID = TIER.TIER_ID
		LEFT OUTER JOIN OFFICIATION ON GAME.GAME_ID = OFFICIATION.GAME_ID
		LEFT OUTER JOIN REFEREE ON OFFICIATION.REFEREE_ID = REFEREE.REFEREE_ID
        LEFT OUTER JOIN CERTIFICATION ON REFEREE.CERTIFICATION_ID = CERTIFICATION.CERTIFICATION_ID 
	ORDER BY GAME_START_TIME ASC;
    
    CREATE OR REPLACE VIEW VIEW_ALL_REFEREES AS 
    SELECT CONCAT(REFEREE_FIRST_NAME, " ", REFEREE_LAST_NAME) AS "Referee", CERTIFICATION_NAME AS "Certification"
    FROM REFEREE
		INNER JOIN CERTIFICATION ON REFEREE.CERTIFICATION_ID = CERTIFICATION.CERTIFICATION_ID;
        
	CREATE OR REPLACE VIEW VIEW_ALL_CERTIFICATIONS AS 
    SELECT CERTIFICATION_NAME AS "Certification", TIER_NAME AS "Tier", (CASE WHEN TIER_ASSISTANTS_NEEDED = TRUE THEN 'Yes' ELSE 'No' END) AS "Assistants Needed", TIER_GAME_DURATION_MINUTES AS "Game Duration (min.)"
    FROM CERTIFICATION
		INNER JOIN ENDORSEMENT ON CERTIFICATION.CERTIFICATION_ID = ENDORSEMENT.CERTIFICATION_ID
        INNER JOIN TIER ON ENDORSEMENT.TIER_ID = TIER.TIER_ID
	GROUP BY CERTIFICATION.CERTIFICATION_ID, TIER.TIER_ID;
    
    CREATE OR REPLACE VIEW VIEW_ALL_PLAYERS AS 
    SELECT CONCAT(PLAYER_FIRST_NAME," ", PLAYER_LAST_NAME) AS "Player", TEAM_NAME AS "Team", PLAYER_SUSPENDED AS "Suspended"
    FROM PLAYER INNER JOIN TEAM ON PLAYER.TEAM_ID = TEAM.TEAM_ID;

	CREATE OR REPLACE VIEW VIEW_ALL_RECORDINGS AS 
    SELECT (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID = GAME_TEAM_1) AS "Team 1", (SELECT TEAM_NAME FROM TEAM WHERE TEAM_ID = GAME_TEAM_2) AS "Team 2", 
				GAME_START_TIME AS "Date", CONCAT(PLAYER_FIRST_NAME, ' ', PLAYER_LAST_NAME) AS "Player", RECORDING_TYPE AS "Recording"
	FROM RECORDING
		INNER JOIN GAME ON RECORDING.GAME_ID = GAME.GAME_ID 
        INNER JOIN PLAYER ON PLAYER.PLAYER_ID = RECORDING.PLAYER_ID;
	
    CREATE OR REPLACE VIEW VIEW_ALL_LOCATIONS AS 
    SELECT LOCATION_TITLE AS "Locaton", LOCATION_FIELD_NUMBER AS "Field", LOCATION_ADDRESS AS "Address"
    FROM LOCATION;
END$$		
        
/*****************************************************************
	Create Stored Procedures For Data Inserts and Updates
*****************************************************************/
    DELIMITER $$

    -- Create/Replace a Proceudure called TIER_ADD that adds a TIER if it does not exist
	DROP PROCEDURE IF EXISTS TIER_ADD$$
	CREATE PROCEDURE TIER_ADD (IN T_NAME VARCHAR(25), IN T_ASSISTANTS_NEEDED BOOL, IN T_GAME_DURATION_MINUTES INT) 
	BEGIN
		INSERT INTO TIER(TIER_NAME, TIER_ASSISTANTS_NEEDED, TIER_GAME_DURATION_MINUTES)
		SELECT T_NAME, T_ASSISTANTS_NEEDED, T_GAME_DURATION_MINUTES
		WHERE 
			NOT EXISTS (SELECT TIER_ID FROM TIER  WHERE TIER_NAME = T_NAME);
	END$$
	
     -- Create/Replace a Proceudure called CERTIFICATION_ADD that adds a TIER if it does not exist
	DROP PROCEDURE IF EXISTS CERTIFICATION_ADD$$
	CREATE PROCEDURE CERTIFICATION_ADD (IN C_NAME VARCHAR(25)) 
	BEGIN
		INSERT INTO CERTIFICATION(CERTIFICATION_NAME)
		SELECT C_NAME
		WHERE 
			NOT EXISTS (SELECT CERTIFICATION_ID FROM CERTIFICATION WHERE CERTIFICATION_NAME = C_NAME);
	END$$
			 
     -- Create/Replace a Proceudure called ENDORSEMENT_ADD that adds an INDORSEMENT if it does not exist
	DROP PROCEDURE IF EXISTS ENDORSEMENT_ADD$$
	CREATE PROCEDURE ENDORSEMENT_ADD (IN C_NAME VARCHAR(25), IN T_NAME VARCHAR(25)) 
	BEGIN
		INSERT INTO ENDORSEMENT(CERTIFICATION_ID, TIER_ID)
		SELECT CERTIFICATION_ID, TIER_ID
        FROM CERTIFICATION, TIER
		WHERE 
			CERTIFICATION_NAME = C_NAME AND TIER_NAME = T_NAME;
			-- NOT EXISTS (SELECT ENDORSEEMENT_ID FROM ENDORSEMENT WHERE CERTIFICATION_NAME = C_NAME AND TIER_NAME);
	END$$  

 -- Create/Replace a Proceudure called REFEREE_ADD that adds a REFEREE if it does not exist
	DROP PROCEDURE IF EXISTS REFEREE_ADD$$
	CREATE PROCEDURE REFEREE_ADD (IN R_FIRST_NAME VARCHAR(25), IN R_LAST_NAME VARCHAR(25), IN C_NAME VARCHAR(25)) 
	BEGIN
		INSERT INTO REFEREE(REFEREE_FIRST_NAME, REFEREE_LAST_NAME, CERTIFICATION_ID)
		SELECT R_FIRST_NAME, R_LAST_NAME, (SELECT CERTIFICATION_ID FROM CERTIFICATION WHERE CERTIFICATION_NAME = C_NAME) 
		WHERE 
			 NOT EXISTS (SELECT REFEREE_ID FROM REFEREE WHERE REFEREE_FIRST_NAME = R_FIRST_NAME AND REFEREE_LAST_NAME = R_LAST_NAME);
	END$$

-- Create/Replace a Proceudure called TEAM_ADD that adds a TEAM if it does not exist
	DROP PROCEDURE IF EXISTS TEAM_ADD$$
	CREATE PROCEDURE TEAM_ADD (IN TEAM_N VARCHAR(50), IN TIER_N VARCHAR(25)) 
	BEGIN
		INSERT INTO TEAM(TEAM_NAME, TIER_ID)
		SELECT TEAM_N, (SELECT TIER_ID FROM TIER WHERE TIER_NAME = TIER_N) 
		WHERE  
			 NOT EXISTS (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = TEAM_N);
	END$$

-- Create/Replace a Proceudure called PLAYER_ADD that adds a PLAYER if it does not exist
	DROP PROCEDURE IF EXISTS PLAYER_ADD$$
	CREATE PROCEDURE PLAYER_ADD(IN P_FIRST_NAME VARCHAR(25), IN P_LAST_NAME VARCHAR(25), IN T_NAME VARCHAR(50), IN P_SUSPENDED BOOLEAN) 
	BEGIN
		INSERT INTO PLAYER(PLAYER_FIRST_NAME, PLAYER_LAST_NAME, TEAM_ID, PLAYER_SUSPENDED)
		SELECT P_FIRST_NAME, P_LAST_NAME, (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = T_NAME), P_SUSPENDED
		WHERE   
			 NOT EXISTS (SELECT PLAYER_ID FROM PLAYER WHERE PLAYER_FIRST_NAME = P_FIRST_NAME AND PLAYER_LAST_NAME = P_LAST_NAME);
	END$$

-- Create/Replace a Proceudure called LOCATON_ADD that adds an LOCATION if it does not exist
	DROP PROCEDURE IF EXISTS LOCATION_ADD$$
	CREATE PROCEDURE LOCATION_ADD(IN L_TITLE VARCHAR(25), IN L_ADDRESS VARCHAR(100), IN L_FIELD_NUMBER INT) 
	BEGIN
		INSERT INTO LOCATION (LOCATION_TITLE, LOCATION_ADDRESS, LOCATION_FIELD_NUMBER)  
		SELECT L_TITLE, L_ADDRESS, L_FIELD_NUMBER
		WHERE    
			 NOT EXISTS (SELECT LOCATION_ID FROM LOCATION WHERE LOCATION_ADDRESS = L_ADDRESS AND LOCATION_FIELD_NUMBER = L_FIELD_NUMBER);
	END$$
    

 -- Create/Replace a Proceudure called GAME_ADD that adds a GAME if it does not exist
	DROP PROCEDURE IF EXISTS GAME_ADD$$
	CREATE PROCEDURE GAME_ADD(IN T_NAME VARCHAR(50), IN G_TEAM_1 VARCHAR(50), IN G_TEAM_2 VARCHAR(50), IN LOCATION_N VARCHAR(25), IN FIELD_N INT, IN G_START_TIME DATETIME, IN G_END_TIME DATETIME, IN G_TEAM_1_SCORE INT, IN G_TEAM_2_SCORE INT)   
	BEGIN
		INSERT INTO GAME (TIER_ID, GAME_TEAM_1, GAME_TEAM_2, GAME_LOCATION, GAME_START_TIME, GAME_END_TIME, GAME_TEAM_1_SCORE, GAME_TEAM_2_SCORE)
		SELECT (SELECT TIER_ID FROM TIER WHERE TIER_NAME= T_NAME), (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_1), (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_2), (SELECT LOCATION_ID FROM LOCATION WHERE LOCATION_TITLE = LOCATION_N AND LOCATION_FIELD_NUMBER = FIELD_N), G_START_TIME, G_END_TIME, G_TEAM_1_SCORE, G_TEAM_2_SCORE;
	END$$   

 -- Create/Replace a Proceudure called OFFICIATION_ADD that adds an OFFICIATION if it does not exist
	DROP PROCEDURE IF EXISTS OFFICIATION_ADD$$
	CREATE PROCEDURE OFFICIATION_ADD(IN G_TEAM_1 VARCHAR(50), IN G_TEAM_2 VARCHAR(50), IN R_NAME_FIRST VARCHAR(25), IN R_NAME_LAST VARCHAR(25), IN O_POSITION VARCHAR(25))
	BEGIN
		INSERT INTO OFFICIATION (GAME_ID, REFEREE_ID, OFFICIATION_POSITION)
		SELECT (SELECT GAME_ID FROM GAME WHERE GAME_TEAM_1 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_1) AND GAME_TEAM_2 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_2)), (SELECT REFEREE_ID FROM REFEREE WHERE REFEREE_FIRST_NAME = R_NAME_FIRST AND REFEREE_LAST_NAME = R_NAME_LAST), O_POSITION;
	END$$   

 -- Create/Replace a Proceudure called RECORDING_ADD that adds a RECORDING if it does not exist
	DROP PROCEDURE IF EXISTS RECORDING_ADD$$
	CREATE PROCEDURE RECORDING_ADD(IN G_TEAM_1 VARCHAR(50), IN G_TEAM_2 VARCHAR(50), IN P_NAME_FIRST VARCHAR(25), IN P_NAME_LAST VARCHAR(25), IN R_TYPE VARCHAR(25))
	BEGIN
		INSERT INTO RECORDING (GAME_ID, PLAYER_ID, RECORDING_TYPE)
		SELECT (SELECT GAME_ID FROM GAME WHERE GAME_TEAM_1 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_1) AND GAME_TEAM_2 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_2)), (SELECT PLAYER_ID FROM PLAYER WHERE PLAYER_FIRST_NAME = P_NAME_FIRST AND PLAYER_LAST_NAME = P_NAME_LAST), R_TYPE;
	END$$ 

 -- Create/Replace a Proceudure called GAME_SCORE_UPDATE that updates a GAME score 
	DROP PROCEDURE IF EXISTS GAME_SCORE_UPDATE$$
	CREATE PROCEDURE GAME_SCORE_UPDATE(IN G_TEAM_1 VARCHAR(25), IN G_TEAM_2 VARCHAR(25), IN G_START_TIME DATETIME, IN G_TEAM_1_SCORE INT, IN G_TEAM_2_SCORE INT)   
	BEGIN
		UPDATE GAME
        SET 
			GAME_TEAM_1_SCORE = G_TEAM_1_SCORE,
            GAME_TEAM_2_SCORE = G_TEAM_2_SCORE
        WHERE
			GAME_ID = (SELECT GAME_ID FROM GAME WHERE GAME_TEAM_1 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_1) AND GAME_TEAM_2 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_2))
            AND GAME_START_TIME - G_START_TIME;
	END$$ 

-- Create/Replace a Proceudure called GAME_LOCATION_UPDATE that updates a GAME location 
	DROP PROCEDURE IF EXISTS GAME_LOCATION_UPDATE$$
	CREATE PROCEDURE GAME_LOCATION_UPDATE(IN G_TEAM_1 VARCHAR(25), IN G_TEAM_2 VARCHAR(25), IN G_START_TIME DATETIME, IN L_NAME VARCHAR(25))    
	BEGIN
		UPDATE GAME
        SET 
			GAME_LOCATION = (SELECT LOCATION_ID FROM LOCATION WHERE LOCATION_NAME = L_NAME)
        WHERE
			GAME_ID = (SELECT GAME_ID FROM GAME WHERE GAME_TEAM_1 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_1) AND GAME_TEAM_2 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_2))
            AND GAME_START_TIME - G_START_TIME;
	END$$ 

-- Create/Replace a Proceudure called GAME_TIME_UPDATE that updates a GAME start time and or end time
	DROP PROCEDURE IF EXISTS GAME_TIME_UPDATE$$
	CREATE PROCEDURE GAME_TIME_UPDATE(IN G_TEAM_1 VARCHAR(25), IN G_TEAM_2 VARCHAR(25), IN L_NAME VARCHAR(25), IN G_START_TIME DATETIME, IN G_END_TIME DATETIME)    
	BEGIN
		UPDATE GAME
        SET 
			GAME_START_TIME = G_START_TIME
            AND GAME_END_TIME = G_END_TIME
        WHERE
			GAME_ID = (SELECT GAME_ID FROM GAME WHERE GAME_TEAM_1 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_1) AND GAME_TEAM_2 = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = G_TEAM_2))
            AND LOCATION_NAME = L_NAME;
	END$$ 
    
   -- Create/Replace a Proceudure called REFEREE_CERTIFICATION_UPDATE that updates a REFEREEE certification
	DROP PROCEDURE IF EXISTS REFEREE_CERTIFICATION_UPDATE$$
	CREATE PROCEDURE REFEREE_CERTIFICATION_UPDATE(IN R_FIRST_NAME VARCHAR(25), IN R_LAST_NAME VARCHAR(25), IN CERTIFICATION_N VARCHAR(25))    
	BEGIN
		UPDATE REEFEREE
        SET 
			CERTIFICATION_ID = (SELECT CERTIFICATION_ID FROM CERETIFICATION WHERE CERTIFICATION_NAME = CEERTIFICATION_N)
        WHERE
			REFEREE_FIRST_NAME= R_FIRST_NAME
            AND REFEREE_LAST_NAME = R_LAST_NAME;
	END$$  
    
    
-- Create/Replace a Proceudure called TEAM_TIER_UPDATE that updates a TEAM's tier
	DROP PROCEDURE IF EXISTS TEAM_TIER_UPDATE$$
	CREATE PROCEDURE TEAM_TIER_UPDATE(IN NAME_OF_TEAM VARCHAR(25), IN TIER_N VARCHAR(25))    
	BEGIN
		UPDATE TEAM
        SET 
			TIER_ID = (SELECT TIER_ID FROM TIERE WHERE TIER_NAME = TIER_N)
        WHERE
			TEAM_NAME = NAME_OF_TEAM;
	END$$
    
-- Create/Replace a Proceudure called PLAYER_UPDATE that updates a PLAYERS team 
	DROP PROCEDURE IF EXISTS PLAYER_UPDATE$$
	CREATE PROCEDURE PLAYER_UPDATE(IN P_FIRST_NAME VARCHAR(25), IN P_LAST_NAME VARCHAR(25), IN NAME_OF_TEAM VARCHAR(25))    
	BEGIN
		UPDATE PLAYER
        SET 
			TEAM_ID = (SELECT TEAM_ID FROM TEAM WHERE TEAM_NAME = NAME_OF_TEAM)  
        WHERE
			PLAYER_FIRST_NAME = P_NAME_FIRST 
            AND PLAYER_LAST_NAME = P_NAME_LAST;
	END$$
	DELIMITER ;
    
/**************************************************
	Create Data Stored Procedure
**************************************************/
	DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_CREATE_DATA$$
	CREATE PROCEDURE SP_CREATE_DATA()
	BEGIN
		CALL SP_DROP_TABLES();
		CALL SP_CREATE_TABLES();
		CALL SP_CREATE_VIEWS();
		CALL SP_POPULATE_DATA();
	END$$
	DELIMITER ;

/**************************************************
	Show result Stored Procedure
***************************************************/

	-- Create/Replace a Proceudure called SP_SHOW_RESULTS
    DELIMITER $$
	DROP PROCEDURE IF EXISTS SP_SHOW_RESULT$$
	CREATE PROCEDURE SP_SHOW_RESULT() 
	BEGIN
        SELECT * FROM VIEW_ALL_TEAMS;
        SELECT * FROM VIEW_ALL_GAMES;
        SELECT * FROM VIEW_ALL_CERTIFICATIONS;
        SELECT * FROM VIEW_ALL_RECORDINGS;
        SELECT * FROM VIEW_ALL_LOCATIONS;
-- Which games need referees? i.e what games have no referee, are in a tier that needs assistants and does not have at least 1 assistant, or has an assistant but no center? 
        SELECT * FROM VIEW_UNASSIGNED_MATCHES;
-- How many referees are certified for each tier?
		SELECT * FROM VIEW_TIER_ASSIGNMENTS;
-- What players have recieved a red card or are suspended? (these players are not allowed on the field) 
		SELECT * FROM VIEW_RED_CARDS;
-- What is the maximum number of goals scored by a player on each team that has scored?
        SELECT * FROM VIEW_MAX_GOALS;
       
	END$$
    DELIMITER ;

CALL SP_CREATE_DATA();
CALL SP_SHOW_RESULT();    
